import os

def save_text_to_file(text, filepath):
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(text)

def read_text_file(filepath):
    with open(filepath, 'r', encoding='utf-8') as f:
        return f.read()

def list_files_in_directory(directory, extensions=None):
    files = []
    for filename in os.listdir(directory):
        if extensions is None or any(filename.lower().endswith(ext) for ext in extensions):
            files.append(filename)
    return files

# --- NER Extraction using spaCy ---
def extract_entities_from_text(text):
    import spacy
    nlp = spacy.load('en_core_web_sm')
    doc = nlp(text)
    skills = set()
    experience = set()
    locations = set()
    # Simple rule-based extraction for demo
    for ent in doc.ents:
        if ent.label_ in ["ORG", "SKILL"]:
            skills.add(ent.text)
        elif ent.label_ in ["DATE", "TIME"]:
            experience.add(ent.text)
        elif ent.label_ in ["GPE", "LOC"]:
            locations.add(ent.text)
    # Add keyword-based skill extraction (very basic)
    skill_keywords = ["python", "java", "sql", "excel", "machine learning", "deep learning", "nlp", "data analysis", "project management", "communication", "leadership"]
    for kw in skill_keywords:
        if kw in text.lower():
            skills.add(kw)
    return {
        "skills": list(skills),
        "experience": list(experience),
        "location": list(locations)
    }

# --- Extract skill keywords from JD text ---
def extract_skills_from_jd(jd_text):
    skill_keywords = ["python", "java", "sql", "excel", "machine learning", "deep learning", "nlp", "data analysis", "project management", "communication", "leadership"]
    found_skills = set()
    for kw in skill_keywords:
        if kw in jd_text.lower():
            found_skills.add(kw)
    return found_skills

# --- PDF Report Generation ---
def generate_pdf_report(df, title="Resume Match Report"):
    from fpdf import FPDF
    import datetime
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, title, ln=True, align='C')
    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, f"Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True)
    pdf.ln(5)
    # Table header
    col_widths = [40, 25, 25, 30, 30, 30, 30, 30, 30]
    headers = list(df.columns)
    pdf.set_font("Arial", 'B', 10)
    for i, col in enumerate(headers):
        pdf.cell(col_widths[i % len(col_widths)], 8, col, border=1)
    pdf.ln()
    pdf.set_font("Arial", '', 9)
    # Table rows
    for idx, row in df.iterrows():
        for i, col in enumerate(headers):
            val = str(row[col])[:30]  # Truncate long text
            pdf.cell(col_widths[i % len(col_widths)], 8, val, border=1)
        pdf.ln()
    pdf.ln(5)
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(0, 10, "Recommendations:", ln=True)
    for idx, row in df.iterrows():
        pdf.cell(0, 8, f"{row[headers[0]]}: {row['Status']} | Missing Skills: {row.get('Missing Skills', '')}", ln=True)
    pdf.ln(5)
    pdf.set_font("Arial", '', 9)
    pdf.cell(0, 8, "This report was generated by AI Resume Matcher.", ln=True, align='C')
    return pdf.output(dest='S').encode('latin1')
